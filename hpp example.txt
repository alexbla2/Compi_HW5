#ifndef H_PARSER
#define H_PARSER
#include <stdlib.h>
#include <iostream>
#include <iterator>
#include <map>
#include <stack>
#include <string>
#include <sstream>
#include <vector>
#include "output.hpp"
#include "bp.hpp"
#define YYSTYPE Node*
using namespace std;
using namespace output;
class Symbol;
class Register;
typedef vector<Symbol> SymbolTable;
extern int yylineno;
extern stack<SymbolTable> scopes;
extern stack<int> offsets;
extern bool allowStrings;
extern stack<Register> registerPool;
static int msgCount = 0;

class BpLists{
  public:
  std::vector<int> trueList;
	std::vector<int> falseList;
  std::vector<int> nextList;  
  std::vector<int> breakList;
  string quad;
  BpLists(){
  }
};

class Register {
private:
  string _name;
  int _number;
public:
  Register():_name("$0"),_number(0){
    
  }
  Register(string name,int number):_name(name),_number(number){

  }
  Register(const Register& reg){
    this->_name = reg._name;
    this->_number = reg._number;
  }
  Register& operator=(const Register& reg){
    this->_name = reg._name;
    this->_number = reg._number;
    return *this;
  }
  string name(){
    return _name;
  }
  int number(){
    return _number;
  }
};

class Node {
 public:
 int linenum;
  std::vector<Node*> children;
  Node(){
    linenum=yylineno;
  }
  virtual ~Node() {
    for (std::vector<Node*>::const_iterator it = children.begin();
         it != children.end(); ++it) {
      delete *it;
    }
  }
};

class Void : public Node {
 public:
  string text;
  Void();
};
class Int : public Node {
 public:
  string type;
  Int() { type = "INT"; }
};
class Byte : public Node {
 public:
  string type;
  Byte() { type = "BYTE"; }
};
class b : public Node {

};
class Bool : public Node {
 public:
  string type;
  string val;
  Bool(string yytext) { 
    val=yytext;
    type = "BOOL"; }
};
class And : public Node {};
class Or : public Node {};
class Not : public Node {};
class True : public Node {};
class False : public Node {};
class Return : public Node {};
class Else : public Node {};
class If : public Node {};
class While : public Node {};
class Switch : public Node {};
class Case : public Node {};
class Break : public Node {};
class Default : public Node {};
class Colon : public Node {};
class Sc : public Node {};
class Comma : public Node {};
class Lparen : public Node {};
class Rparen : public Node {};
class Lbrace : public Node {};
class Rbrace : public Node {};
class Assign : public Node {};
class Relop : public Node {
  public:
    string op;
    Relop(string yytext){
      this->op=yytext;
    }
};
class Binop : public Node {
  public:
    string op;
    Binop(string yytext){
      this->op=yytext;
    }
};
class Id : public Node {
 public:
  string text;
  Register reg;
  Id(char* yytext) {  text = string(yytext);
                      //reg = registerPool.top();
                      //registerPool.pop();
                   }
  Id(string yytext) { text = yytext;
                      //reg = registerPool.top();
                      //registerPool.pop();
                    }
  virtual ~Id() {}
};
class Num : public Node {
 public:
  string type;
  int value;
  Register reg;
  Num(char* yytext) {
    type = "INT";
    value = atoi(yytext);
    reg = registerPool.top();
    registerPool.pop();
    CodeBuffer::instance().emit("li " +reg.name()+","+string(yytext));
  };
};
class String : public Node {
 public:
  Register reg;
  string type;
  string value;
  string label;
  String(char* yytext);
};

class Type : public Node {
 public:
  string type;
  Type(){};
  Type(Int* type);
  Type(Bool* type);
  Type(Byte* type);
};

class Exp;

class ExpList : public Node {
 public:
  std::vector<string> types;
  std::vector<Register> registers;
  ExpList(){
    types = std::vector<string>();
    registers = std::vector<Register>();
  };
  ExpList(Exp* expression);
  ExpList(Exp* expression, ExpList* expList);
};

class CaseDec : public Node {
 public:
  string value;
  bool isDefault;
  CaseDec(){
    this->isDefault=true;
    this->value="DEFAULT";
  };//default
  CaseDec(Num* num);
  CaseDec(Num* num, b* b);
};

class Call : public Node {
 public:
  string id;
  Call(){};
  Call(Id* id);
  Call(Id* id, ExpList* expList);
};

class Exp : public Node {
 public:
  Register reg;
  string type;
  BpLists bplists;
  Exp(){};
  Exp(String* s);
  Exp(Exp* exp);
  Exp(Exp* exp1, Binop* binop, Exp* exp2);
  Exp(Id* id);
  Exp(Call* call);
  Exp(Num* num);
  Exp(Num* num, b* byte);
  Exp(False* f);
  Exp(True* t);
  Exp(Not* notOp, Exp* exp2);
  Exp(Exp* expression1, And* andOp, Exp* expression2);
  Exp(Exp* exp1, Or* orOp, Exp* exp2);
  Exp(Exp* exp1, Relop* relop, Exp* exp2);
};

class Statements;

class CaseStatement : public Node {
 public:
  string value;
  BpLists bplists;   
  CaseStatement(){};
  CaseStatement(CaseDec* caseDec);
  CaseStatement(CaseDec* caseDec, Statements* statements);
};

class CaseList : public Node {
 public:
  BpLists bplists; 
  std::vector<string> quadList;
  std::vector<string> valueList;  
  CaseList(){};
  CaseList(CaseStatement* caseStatement);
  CaseList(CaseList* caseList, CaseStatement* caseStatement);
};

class Statement : public Node {
 public:
  BpLists bplists;
  Statement();
  Statement(Statements* statements);
  Statement(Call* call);
  Statement(Exp* expression);
  Statement(Type* type, Id* id);
  Statement(Id* id, Exp* expression);
  Statement(If* ifNode,Exp* expression, Statement* statement);
  Statement(Exp* expression,Statement* ifStatment,
    Statement* N,Statement* elseStatement);
  Statement(Exp* expression, Statement* statement);
  Statement(Exp* expression,Statement* N, CaseList* caseList);
  Statement(Type* type, Id* id, Exp* expression);
  Statement(Exp* expression, Statement* ifStatment, Statement* elseStatement);
  Statement(Return* ret);
  Statement(Return* ret,Exp* expression);
};

class Statements : public Node {
 public:
  BpLists bplists; 
  Statements();
  Statements(Statement* statement);
  Statements(Statements* statements, Statement* statement);
};

class FormalDecl : public Node {
 public:
  string type;
  string id;
  FormalDecl(){};
  FormalDecl(Type* type, Id* id);
};

class FormalsList : public Node {
 public:
  vector<FormalDecl*> list;
  FormalsList(){};
  FormalsList(FormalDecl* formalDecl);
  FormalsList(FormalsList* formalsList, FormalDecl* formalsDecl);
};

class Formals : public Node {
 public:
  vector<FormalDecl*> formals;
  Formals();
  Formals(FormalsList* formalsList);
};

/**
Return type of a function
 */
class RetType : public Node {
 public:
  string type;
  RetType(){};
  RetType(Void* voidNode);
  RetType(Type* type);
};

/**
Single function decleration
 */
class Func : public Node {
 public:
  string id;
  string ret;
  Formals* formals;
  Func(){};
  Func(RetType* ret, Id* id, Formals* formals, Statements* statements);
};

/**
List of function declerations.
 */
class FuncList : public Node {
 public:
  FuncList();
  FuncList(FuncList* list, Func* func);  // notice the recursion in the grammer
  vector<Func*> funcs;
  virtual ~FuncList() {}
};

/**
Program class mostly holds the function list.
 */
class Program : public Node {
 public:
  Program(FuncList* funcs);
  vector<Func*> funcs;
  virtual ~Program() {}
};

class Symbol {
public:
 string name;
 string type;
 bool isFunc;
 std::vector<string> args;
 string ret;
 int offset;
 Symbol() {
   name = "";
   offset = 0;
   type = "";
   isFunc = false;
 };
 Symbol(const Symbol& s) {
   name = s.name;
   offset = s.offset;
   type = s.type;
   isFunc = s.isFunc;
   ret = s.ret;
   args = s.args;
 }
 Symbol(string name, string type, int offset)
     : name(name), type(type), offset(offset) {
       isFunc=false;
     }
 Symbol(string name, string type, int offset,std::vector<string>& args,string ret)
     : name(name), type(type), offset(offset) ,args(args),ret(ret){
       isFunc = true;
     }
};

//********Utilities********//
std::string intToString ( int num );
void addFuncSymbol(stack<SymbolTable>& scopes, stack<int>& offsets,
                   RetType* ret, Id* id, Formals* formals, int lineno);
void initializeScopes(stack<SymbolTable>& scopes, stack<int>& offsets);
void printScope(SymbolTable& table);
void addScope(stack<SymbolTable>& scopes, stack<int>& offsets);
void addFormalsToScope(stack<SymbolTable>& scopes, stack<int>& offsets,
                       Formals* formals, int lineno);
void addFormalToScope(stack<SymbolTable>& scopes, stack<int>& offsets, Symbol s,
                      int lineno);
void addVariableToScope(stack<SymbolTable>& scopes, stack<int>& offsets,
                        Type* type, Id* id, int lineno);
bool canBreak(stack<bool>& breakables);
bool isDeclared(stack<SymbolTable>& scopes, Id* id);
SymbolTable::iterator findId(SymbolTable& table, string id);
string getTypeById(stack<SymbolTable>& scopes, Id* id);
Symbol getSymbolById(stack<SymbolTable>& scopes,string id);
bool validTypes(vector<string>& types1,vector<string>& types2);
void initializeRegisterPool(stack<Register>& pool);
void saveFramePointer();
void saveUsedRegisters();
void restoreUsedRegisters();
#endif