%{

//User Declarations

#include "output.hpp"
#include "bp.hpp"
#include "parser.hpp"
#include <stdio.h>

int yylex();
void yyerror(const char*);

extern int yylineno;    //line number from lex for Errors

//Global Variables

std::stack<SymbolTable> TableStack;
std::stack<int> OffsetStack;
std::stack<Register> registerPool;//-------------------------------------------------------

RetType* expectedRet;        ////current fun expected return type for checking
Id* currentFunName;            //current fun name
Formals* currentFunParams;   //current fun params for type checking

bool isAprintFunc;           //special case for the print function
int whileScopes;             //current number of while scopes 
int derivesNum;

using namespace output;

%}

//Declarations

%token VOID
%token INT;
%token BYTE;
%token B;
%token BOOL;
%left AND;
%left OR;
%right NOT;
%token TRUE;
%token FALSE;
%right RETURN;
%token WHILE;
%token BREAK;
%token SC;
%token COMMA;
%left LPAREN;
%left RPAREN;
%nonassoc ELSE;
%token IF;
%left LBRACE;
%left RBRACE;
%left LBRACK;       
%left RBRACK;       
%right ASSIGN;
%nonassoc RELOP;
%left PLUS;
%left MINUS;
%left MUL;
%left DIV;
%token ID;
%token NUM;
%token STRING;


%%

//Rules

Program: Funcs {
    checkMain();
    finishScope(TableStack,OffsetStack);}
;

Funcs:  /*epsilon*/ {
     $$ = new Funcs();
     if(derivesNum == 0 && yychar != 0){
        errorSyn(yylineno); 
        exit(0);
     }
};

Funcs: FuncDecl Funcs { $$ = new Funcs((Funcs*)$2, (Func*)$1);  } 

FuncDecl: RetType UpdateCurrentFunName LPAREN Formals AddFuncScope RPAREN OpenFunScope LBRACE Statements RBRACE {
    derivesNum--;
    Func* func = new Func((RetType*)$1, (Id*)$2, (Formals*)$4, (Statements*)$9);
    $$ = func;
    finishScope(TableStack,OffsetStack);}
;

RetType: VOID {
    RetType* type = new RetType((Void*)$1);
    expectedRet = type;      //updates the expected return type to VOID
    $$ = type;}
;

//what about an array retType?
RetType: Type {
    RetType* type = new RetType((Type*)$1);
    expectedRet =type;      //updates the expected return type accord.
    $$ = type;}
;

UpdateCurrentFunName: ID {
    derivesNum++;
    currentFunName = (Id*)$1;
    $$ = $1;
}

AddFuncScope: {
    addFuncToScope(TableStack, OffsetStack, expectedRet, currentFunName, currentFunParams, yylineno);
}

OpenFunScope: {
    addNewFramePointer();
    addNewScope(TableStack, OffsetStack);    //opens a new scope for function
    addFuncSymScope(TableStack, OffsetStack, currentFunParams, yylineno); 
};

Formals: /*epsilon*/ {
    Formals* params = new Formals();
    currentFunParams = params; //no parameters for the current func
    $$ = params;}
;

Formals: FormalsList {
    Formals* params = new Formals((FormalsList*)$1);
    currentFunParams = params;
    $$ = params;}
;

FormalsList: FormalDecl { $$ = new FormalsList((FormalDecl*)$1); }
            | FormalDecl COMMA FormalsList{ $$ = new FormalsList((FormalsList*)$3, (FormalDecl*)$1); } //updates the current func parameters
;

FormalDecl: Type ID { $$ = new FormalDecl((Type*)$1, (Id*)$2); }
            | Type ID LBRACK NUM RBRACK { $$ = new FormalDecl((Type*)$1, (Id*)$2 ,(Num*)$4); }       //array function 
            | Type ID LBRACK NUM B RBRACK { $$ = new FormalDecl((Type*)$1, (Id*)$2 ,(Num*)$4, (b*)$5); }     //array function  
;

Statements: Statement { $$ = new Statements( (Statement*)$1); }
            | Statements Statement { $$ = new Statements( (Statements*)$1, (Statement*)$2); }
;

Statement: LBRACE AddNewScope Statements RBRACE {
    $$ = new Statement( (Statements*)$3);
    finishScope(TableStack,OffsetStack);}
;

AddNewScope: {
    addNewScope(TableStack, OffsetStack);}
;

//dec a new variable and add it to scope
Statement: Type ID SC {
    $$ = new Statement( (Type*) $1, (Id*)$2);
	string temp = ( (Type*) $1)->type;
    newVarScope(TableStack, OffsetStack, temp, (Id*) $2, yylineno,1);}
;

//dec and assign to a new variable and add it to scope
Statement: Type ID ASSIGN Exp SC {
    $$ = new Statement( (Type*) $1, (Id*)$2, (Exp*)$4);
	string temp = ( (Type*) $1)->type;
    newVarScope(TableStack, OffsetStack, temp, (Id*) $2, yylineno,1);}
;

//dec of a new int array 
Statement: Type ID LBRACK NUM RBRACK SC {
    string temp = ( (Type*)$1)->type;
    int val=( (Num*)$4)->value;
    $$ = new Statement( (Type*)$1, (Id*)$2, (Num*)$4);
    newVarScope(TableStack, OffsetStack, makeArrayType(temp,val), (Id*) $2, yylineno,val);}
;

//dec of a new byte array       
Statement: Type ID LBRACK NUM B RBRACK SC {
        string temp = ( (Type*)$1)->type;
        int val=( (Num*)$4)->value;
        $$ = new Statement( (Type*)$1, (Id*)$2, (Num*)$4, (b*)$5);
        newVarScope(TableStack, OffsetStack, makeArrayType(temp,val), (Id*) $2, yylineno,val);}
;

//assign to variable
Statement: ID ASSIGN Exp SC {
    $$ = new Statement( (Id*)$1, (Exp*)$3);}
;

//assign to an array 
Statement: ID checkArrayIndexType ASSIGN Exp SC {
    $$ = new Statement( (Id*)$1, (Exp*)$2, (Exp*)$4);}
;

//function call
Statement: Call SC {
    $$ = new Statement( (Call*)$1);}
;

//simple return - only in void functions! check salso size for array type
Statement: RETURN SC {
    if(expectedRet->type == "VOID"){ //is a void func
        $$ = new Statement();
    }else{
        errorMismatch(yylineno);
        exit(0);
    }
};

//return with a type - accord to the func type -- check salso size for array type  -need to update!
Statement: RETURN Exp SC {
    if(expectedRet->type == "VOID"){
        errorMismatch(yylineno);
        exit(0);
    }
    if(expectedRet->type != ( (Exp*)$2)->type){
        if((expectedRet->type == "INT" && ((Exp*)$2)->type == "BYTE") ) { //allowed cast from byte to int
        }else{
            errorMismatch(yylineno);
            exit(0);
        }
    }
};

//if statement
Statement: IF LPAREN checkExpType MARKER_M_IF AddNewScope Statement ExitScope {
    ((Statement*)$6)->bp.quad = ((Statement*)$4)->bp.quad;
    $$ = new Statement( (Exp*)$3, (Statement*)$6);}
;

//exits the current scope
ExitScope: {
    finishScope(TableStack,OffsetStack);}
;

MARKER_M_IF : {
    $$ = new Statement(); //empty statement for quad
    ((Statement*)$$)->bp.quad = CodeBuffer::instance().genLabel();
}

MARKER_N_IF : {
    $$ = new Statement(); //empty statement for quad
    ((Statement*)$$)->bp.quad = CodeBuffer::instance().genLabel();
    ((Statement*)$$)->bp.nextList = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j "));
}


//if statement with an else
Statement: IF LPAREN checkExpType MARKER_M_IF AddNewScope Statement ExitScope ELSE MARKER_N_IF MARKER_M_IF AddNewScope Statement {
    ((Statement*)$6)->bp.quad = ((Statement*)$4)->bp.quad;
    ((Statement*)$12)->bp.quad = ((Statement*)$10)->bp.quad;
    $$ = new Statement( (Exp*)$3, (Statement*)$6, (Statement*)$12);
    finishScope(TableStack,OffsetStack);
    delete $9; //delete N MARKER
};

//while loop
Statement: WHILE AddWhileScope LPAREN MARKER_M_WHILE checkExpType AddNewScope MARKER_N_WHILE Statement {
    ((Exp*)$5)->bp.quad=((Exp*)$4)->bp.quad;
    ((Statement*)$8)->bp.quad=((Statement*)$7)->bp.quad;
    $$ = new Statement( (Exp*)$5, (Statement*)$8);
    finishScope(TableStack,OffsetStack);
    whileScopes--; }
;

MARKER_M_WHILE : {
    $$ = new Exp(); //empty statement for quad
    ((Exp*)$$)->bp.quad = CodeBuffer::instance().genLabel();
}

MARKER_N_WHILE : {
    $$ = new Statement(); //empty statement for quad
    ((Statement*)$$)->bp.quad = CodeBuffer::instance().genLabel();
}

//check if the expression is BOOL  in IF/While
checkExpType: Exp RPAREN {
    if( ((Exp*)$1)->type != "BOOL"){
        errorMismatch(yylineno);
        exit(0);
    }
    $$ = $1;}
;

//[X] - checks if the X type is a num 
checkArrayIndexType: LBRACK Exp RBRACK {
    if( (((Exp*)$2)->type != "INT") && (((Exp*)$2)->type != "BYTE")){
        errorMismatch(yylineno);
        exit(0);
    }
    $$ = $2;}
;

//while scopes counter for the break command
AddWhileScope: {
    whileScopes++;}
;

//break command
Statement: BREAK SC {
    if(whileScopes == 0){        //checks if it's in atleast one while scope
        errorUnexpectedBreak(yylineno);
        exit(0);
    }else{
        $$ = new Statement();
    }
    ((Statement*)$$)->bp.breakList = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j ")); //leave for backPatch
};

//checks function id for a special case of print function
FuncName: ID {
    if( ((Id*)$1)->name == "print"){   //checks if the func is *print* for special case (- can accept string after it
        isAprintFunc = true;                
    }
    $$ = $1;
};

//calls function with parameters
Call: FuncName LPAREN ExpList RPAREN {
    $$ = new Call( (Id*)$1, (ExpList*)$3);
    isAprintFunc = false; }       //back to default status        
;

//calls function without parameters
Call: FuncName LPAREN RPAREN {
    $$ = new Call( (Id*)$1);}
;

ExpList: Exp { $$ = new ExpList( (Exp*)$1); }
        | Exp COMMA ExpList { $$ = new ExpList( (Exp*)$1, (ExpList*)$3); }
;

Type: INT  { $$ = new Type("INT"); }
    | BYTE { $$ = new Type("BYTE"); }
    | BOOL { $$ = new Type("BOOL"); }
;

Exp: LPAREN Exp RPAREN { $$ = new Exp( (Exp*)$2); }
    | ID checkArrayIndexType { $$ = new Exp( (Id*)$1, (Exp*)$2); }        //array var 
    | ID { $$ = new Exp( (Id*)$1); }
    | Call { $$ = new Exp( (Call*)$1); }
    | NUM { $$ = new Exp( (Num*)$1); }
    | NUM B { $$ = new Exp( (Num*)$1, (b*)$2); }
    | STRING { $$ = new Exp( (String*)$1,isAprintFunc ); }
    | TRUE { $$ = new Exp("TRUE"); }
    | FALSE { $$ = new Exp("FALSE"); }
    | NOT Exp { $$ = new Exp("NOT", (Exp*)$2); }
    | Exp PLUS Exp { $$ = new Exp( (Exp*)$1 ,(Exp*)$3,"+"); }   //------------------------------------
    | Exp MINUS Exp { $$ = new Exp( (Exp*)$1 ,(Exp*)$3,"-"); }
    | Exp MUL Exp { $$ = new Exp( (Exp*)$1 ,(Exp*)$3,"*"); }        //operators are send as the 3th var to Exp cons **
    | Exp DIV Exp { $$ = new Exp( (Exp*)$1 ,(Exp*)$3,"/"); }    //-------------------------------------
    | Exp RELOP Exp { $$ = new Exp((Exp*)$1 ,(Exp*)$3,"RELOP",yytext); }
;

Exp: Exp AND MARKER_M_EXP Exp { //added marker here **
    ((Exp*)$4)->bp.quad = ((Exp*)$3)->bp.quad;
    $$ = new Exp( (Exp*)$1 ,(Exp*)$4,"AND"); 
    delete $3;
};  

Exp: Exp OR MARKER_M_EXP Exp { //added marker here **
    ((Exp*)$4)->bp.quad = ((Exp*)$3)->bp.quad;
    $$ = new Exp( (Exp*)$1 ,(Exp*)$4,"OR"); 
    delete $3;
};    

MARKER_M_EXP: {
    $$ = new Exp(); //new exp for quad
    ((Exp*)$$)->bp.quad = CodeBuffer.instance().genLabel();
}

%%

//User Routines

void yyerror(const char*) {
    errorSyn(yylineno); //Syntax Error
    exit(0);
}

int main(){
    whileScopes=0;
    derivesNum=0;
    isAprintFunc=false;
    StacksInit(TableStack, OffsetStack);
    RegistersInit(registerPool);    //------new func added for init the registers
    return yyparse();
}